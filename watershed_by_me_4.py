import cv2 as cv
import numpy as np
from PIL import Image, ImageFilter, ImageEnhance
import matplotlib.pyplot as plt

import test2

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PyCharm
import matplotlib
matplotlib.use('TkAgg')

import sys
sys.setrecursionlimit(10000)

def is_similar_rgb(pixel1, pixel2, treshold,  cx, cy, nx, ny): # —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–∏–∫–ª —à—ë–ª –∫ —Å–∞–º–æ–º—É —è—Ä–∫–æ–º—É —Å–æ—Å–µ–¥—É
    r1, g1, b1 = pixel1
    r2, g2, b2 = pixel2
    distance = ((r1 - r2) ** 2 + (g1 - g2) ** 2 + (b1 - b2) ** 2) ** 0.5
    # print(f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É –ø–∏–∫—Å–µ–ª—è–º–∏ x1={cx},y1={cy}  x2={nx},y2={ny}     {pixel1} –∏  {pixel2}", distance)
    return distance <= treshold

def marker_of_one_object2(diff_img, x, y, current_max_x, current_max_y, visited, treshold):
    stack = [(x, y)]
    max_x, max_y = current_max_x, current_max_y
    min_x, min_y = current_max_x, current_max_y
    i = 0
    while stack:
        i += 1
        cx, cy = stack.pop()
        if (cx, cy) in visited:
            continue
        visited.add((cx, cy))
        max_x = max(max_x, cx)
        max_y = max(max_y, cy)
        min_x = min(min_x, cx)
        min_y = min(min_y, cy)
        for nx, ny in [(cx + 1, cy), (cx + 1, cy + 1), (cx, cy + 1), (cx - 1, cy + 1), (cx - 1, cy),
                       (cx - 1, cy - 1), (cx, cy - 1), (cx + 1, cy - 1), ]:
            if 0 <= nx < diff_img.width and 0 <= ny < diff_img.height:
                pixel_value = diff_img.getpixel((nx, ny))
                r, g, b = pixel_value
                initial_pixel = diff_img.getpixel((cx, cy))
                if is_similar_rgb(pixel_value, initial_pixel, treshold, cx, cy, nx, ny):
                    stack.append((nx, ny))
    return max_x, max_y, min_x, min_y, i

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
image_path = "img/blood4.png"
image = Image.open(image_path)
image = image.filter(ImageFilter.MedianFilter(size=7))
image_for_markers = cv.imread(image_path)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# a = 0.01
# image_mask = np.array([[a / 4, (1 - a)/4, a/4],
#                        [(1 - a)/4, -1, (1 - a)/4],
#                        [a / 4, (1 - a)/4, a/4]])
# image_mask = 4 / (a + 1) * image_mask

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
width, height = image.size
new_image = Image.new("RGB", (width, height))
#
# # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ RGB –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
# image_list = []
# for y in range(1, height - 1):
#     row = []
#     for x in range(1, width - 1):
#         sr = sg = sb = 0
#         for i in range(3):
#             for j in range(3):
#                 pixel_value = image.getpixel((x + i - 1, y + j - 1))
#                 r, g, b = pixel_value
#                 sr += image_mask[i, j] * r
#                 sg += image_mask[i, j] * g
#                 sb += image_mask[i, j] * b
#         sr = max(0, min(255, int(sr)))
#         sg = max(0, min(255, int(sg)))
#         sb = max(0, min(255, int(sb)))
#         new_image.putpixel((x, y), (sr, sg, sb))
#         row.append((sr, sg, sb))
#     image_list.append(row)
#
# new_image.save("output_rgb_image_diff.png")
# new_image.show()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤

diff_img = Image.open("output_rgb_image_diff.png")
# diff_img = diff_img.filter(ImageFilter.GaussianBlur(3))
# image2 = cv.imread(image_path)
diff_img = test2.find_contours_1px_universal(image_path)

# # üíâ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è ‚Äî –∑–∞–ª–∏–≤–∞–µ–º –¥—ã—Ä—ã –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
# diff_cv = np.array(diff_img)
# diff_cv = cv.cvtColor(diff_cv, cv.COLOR_RGB2GRAY)
#
# # –î–µ–ª–∞–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É (–≤—Å—ë, —á—Ç–æ –≤—ã—à–µ 50 ‚Äî –±–µ–ª–æ–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —á—ë—Ä–Ω–æ–µ)
# _, binary = cv.threshold(diff_cv, 50, 255, cv.THRESH_BINARY)
#
# # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—ã—Ä–∫–∏ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
# kernel = np.ones((7, 7), np.uint8)
# closed = cv.morphologyEx(binary, cv.MORPH_CLOSE, kernel)
#
# # –û–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è (PIL RGB)
# diff_img = Image.fromarray(cv.cvtColor(closed, cv.COLOR_GRAY2RGB))

diff_img.show()
width_diff_img, height_diff_img = diff_img.size


# –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
markers = np.zeros((height_diff_img, width_diff_img), dtype=np.int32)
rect_about_object = np.zeros((height_diff_img, width_diff_img), dtype=np.int32)
object_markers = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
background_markers = []

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ (–æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ñ–æ–Ω–∞)
threshold_in = 200
threshold_out = 50
contour = False
object_index = 2
visited = set()

for y in range(2, height_diff_img - 2):
    for x in range(2, width_diff_img - 2):
        pixel_value = diff_img.getpixel((x, y))
        r, g, b = pixel_value
        if r + g + b > threshold_in and not contour and (x, y) not in visited:

            max_x, max_y, min_x, min_y, count_pix = marker_of_one_object2(diff_img, x, y, x, y, visited, treshold=threshold_out)
            if count_pix >= 3:
                # markers[y - 2, x - 2] = 1
                # background_markers.append((x - 2, y - 2))
                marker_x = (max_x + min_x) // 2
                marker_y = (max_y + min_y) // 2
                markers[marker_y, marker_x] = object_index  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                object_markers.append((object_index, marker_x, marker_y))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                object_index += 1
                print(f"–ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç min_y={min_y} –¥–æ max_y={max_y}, –æ—Ç min_x={min_x} –¥–æ max_x={max_x}")
                rect_about_object[min_y-1:max_y + 1, min_x-1:max_x + 1] = 1
                contour = True
        elif r + g + b == 0 and contour:
            # markers[y + 2, x + 2] = 1  # –§–æ–Ω
            # background_markers.append((x + 2, y + 2))
            contour = False

# 1. –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
contours, _ = cv.findContours(rect_about_object.astype(np.uint8), cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

# 2. –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—Ç—Ä—ã –≤—Å–µ—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
centers = []
for cnt in contours:
    x, y, w, h = cv.boundingRect(cnt)
    cx = x + w // 2
    cy = y + h // 2
    centers.append((cx, cy))

# 3. –î–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã —Ü–µ–Ω—Ç—Ä–æ–≤ ‚Äî —Å—Ç–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä –º–µ–∂–¥—É –Ω–∏–º–∏
for i in range(len(centers)):
    for j in range(i + 1, len(centers)):
        cx1, cy1 = centers[i]
        cx2, cy2 = centers[j]

        mx = (cx1 + cx2) // 2
        my = (cy1 + cy2) // 2

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –ª–µ–∂–∏—Ç –í–ù–ï –æ–±—ä–µ–∫—Ç–æ–≤ (–≤ –Ω—É–ª–µ)
        if rect_about_object[my, mx] == 0 and markers[my, mx] == 0:
            markers[my, mx] = 1
            background_markers.append((mx, my))



# –í—ã–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
print("\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤:")
for idx, mx, my in object_markers:
    print(f"–ú–∞—Ä–∫–µ—Ä –æ–±—ä–µ–∫—Ç–∞ {idx} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: x={mx}, y={my}")
print("\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤ —Ñ–æ–Ω–∞:")
for mx, my in background_markers:
    print(f"–ú–∞—Ä–∫–µ—Ä —Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: x={mx}, y={my}")

# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
image_with_markers_only = cv.imread(image_path).copy()
for idx, mx, my in object_markers:
    cv.circle(image_with_markers_only, (mx, my), 5, (0, 255, 0), -1)  # –ó–µ–ª—ë–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
for mx, my in background_markers:
    cv.circle(image_with_markers_only, (mx, my), 5, (255, 0, 0), -1)  # –ö—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ–Ω–∞
plt.imshow(cv.cvtColor(image_with_markers_only, cv.COLOR_BGR2RGB))
plt.title('Image with Object and Background Markers')
plt.axis('off')
plt.show()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º Watershed
image_for_watershed = cv.imread(image_path)
markers = cv.watershed(image_for_watershed, markers)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
result = np.zeros_like(image_for_watershed, dtype=np.uint8)
for marker1 in np.unique(markers):
    if marker1 == -1:
        continue
    mask = markers == marker1
    color = np.random.randint(0, 255, size=3, dtype=np.uint8)
    result[mask] = color

axes[1].imshow(cv.cvtColor(result, cv.COLOR_BGR2RGB))
axes[1].set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–æ–≤')
axes[1].axis('off')
plt.show()

image_for_watershed[markers == -1] = [255, 0, 0]  # –ì—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∞—Å–Ω—ã–º
plt.imshow(cv.cvtColor(image_for_watershed, cv.COLOR_BGR2RGB))
plt.title('Segmented Image with Watershed')
plt.show()

# –ù–∞–Ω–æ—Å–∏–º —Ç–æ—á–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
for y in range(1, height_diff_img - 1):
    for x in range(1, width_diff_img - 1):
        if markers[y, x] == 2:
            cv.circle(image_for_markers, (x, y), 2, (0, 150, 0), -1)
        elif markers[y, x] == 3:
            cv.circle(image_for_markers, (x, y), 2, (0, 200, 0), -1)
        elif markers[y, x] == 4:
            cv.circle(image_for_markers, (x, y), 2, (0, 255, 0), -1)
        elif markers[y, x] == 1:
            cv.circle(image_for_markers, (x, y), 2, (255, 0, 0), -1)

plt.imshow(cv.cvtColor(image_for_markers, cv.COLOR_BGR2RGB))
plt.title('Image with Markers')
plt.show()
print(object_index - 1)